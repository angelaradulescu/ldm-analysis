select(Subj, Age, LearnedGame, PoL) %>%
unique() %>%
group_by(Subj,Age) %>%
mutate(LearnedGame = as.logical(LearnedGame)) %>%
summarize(GamesLearned = sum(LearnedGame))
sub_summary %<>% mutate(age_scaled = scale_this(Age))
lm(GamesLearned ~ age_scaled, age_iq_data) %>%
tidy() %>%
kable()%>%
kable_classic(full_width = F, html_font = "Arial") %>%
kable_styling("striped", position = "float_left")
## Linear Regression Model ##
# Load needed libraries
library(tidyverse)
library(glue)
library(magrittr)
library(afex)
library(knitr)
library(kableExtra)
library(broom)
lm(GamesLearned ~ age_scaled, age_iq_data) %>%
tidy() %>%
kable()%>%
kable_classic(full_width = F, html_font = "Arial") %>%
kable_styling("striped", position = "float_left")
lm(GamesLearned ~ age_scaled, sub_summary) %>%
tidy() %>%
kable()%>%
kable_classic(full_width = F, html_font = "Arial") %>%
kable_styling("striped", position = "float_left")
## Linear Regression Model ##
# Load needed libraries
library(tidyverse)
library(glue)
library(magrittr)
library(afex)
library(knitr)
library(kableExtra)
library(broom)
# scale function (z-score)
scale_this <- function(x){
(x - mean(x, na.rm=TRUE)) / sd(x, na.rm=TRUE)
}
# run wasi iq analysis
age_iq_data <- read.csv('https://raw.githubusercontent.com/angelaradulescu/ldm-analysis/main/ProcessedData/ageIQMap.csv')
age_iq_data %<>%
mutate(age_scaled = scale_this(Age),
iq_scaled = scale_this(IQ))
lm(IQ ~ Age, age_iq_data) %>%
tidy() %>%
kable()%>%
kable_classic(full_width = F, html_font = "Arial") %>%
kable_styling("striped", position = "float_left")
####################### AgexNumberOfGamesLearned ###############################
behav_data <- read.csv('https://raw.githubusercontent.com/angelaradulescu/ldm-analysis/main/ProcessedData/CleanedProcessedBehavioralData.csv')
sub_summary <- behav_data %>%
select(Subj, Age, LearnedGame, PoL) %>%
unique() %>%
group_by(Subj,Age) %>%
mutate(LearnedGame = as.logical(LearnedGame)) %>%
summarize(GamesLearned = sum(LearnedGame))
sub_summary %<>% mutate(age_scaled = scale_this(Age))
lm(GamesLearned ~ age_scaled, sub_summary) %>%
tidy() %>%
kable()%>%
kable_classic(full_width = F, html_font = "Arial") %>%
kable_styling("striped", position = "float_left")
lm(GamesLearned ~ Age, sub_summary) %>%
tidy() %>%
kable()%>%
kable_classic(full_width = F, html_font = "Arial") %>%
kable_styling("striped", position = "float_left")
scale_this <- function(x){
(x - mean(x, na.rm=TRUE)) / sd(x, na.rm=TRUE)
}
scale_this(Age)
sub_summary %<>% mutate(age_scaled = scale_this(Age))
## Linear Regression Model ##
# Load needed libraries
library(tidyverse)
library(glue)
library(magrittr)
library(afex)
library(knitr)
library(kableExtra)
library(broom)
# scale function (z-score)
scale_this <- function(x){
(x - mean(x, na.rm=TRUE)) / sd(x, na.rm=TRUE)
}
scale_this(sub_summary$Age)
behav_data <- read.csv('https://raw.githubusercontent.com/angelaradulescu/ldm-analysis/main/ProcessedData/CleanedProcessedBehavioralData.csv')
sub_summary <- behav_data %>%
select(Subj, Age, LearnedGame, PoL) %>%
unique() %>%
group_by(Subj,Age) %>%
mutate(LearnedGame = as.logical(LearnedGame)) %>%
summarize(GamesLearned = sum(LearnedGame))
scale_this(sub_summary$Age)
sub_summary$age_scaled <- scale_this(sub_summary$Age)
lm(GamesLearned ~ age_scaled, sub_summary) %>%
tidy() %>%
kable()%>%
kable_classic(full_width = F, html_font = "Arial") %>%
kable_styling("striped", position = "float_left")
lm(GamesLearned ~ Age, sub_summary) %>%
tidy() %>%
kable()%>%
kable_classic(full_width = F, html_font = "Arial") %>%
kable_styling("striped", position = "float_left")
m1 <- lmer(data = model_data, formula = Entropy ~ scaled_age*LearnedYet + (1|subject_id))
summary(m1)
## Omnibus test.
car::Anova(m1, type = '3')
data <- read.csv('https://raw.githubusercontent.com/angelaradulescu/ldm-analysis/main/ProcessedData/Feedback_Processed_CombinedBehavioralEyetrackingData.csv')
scale_this <- function(x){
(x - mean(x, na.rm=TRUE)) / sd(x, na.rm=TRUE)
}
##################### Select relevant data and rescale #####################
model_data <- data %>%
select(Subj, Entropy, Age, Adult, WithinGameTrial, Game, LearnedGame, Learned, IQ, PoL) %>%
mutate(scaled_age = scale_this(Age),
scaled_iq = scale_this(IQ),
subject_id = as.factor(Subj))
m1 <- lmer(data = model_data, formula = Entropy ~ scaled_age*LearnedYet + (1|subject_id))
summary(m1)
## Omnibus test.
car::Anova(m1, type = '3')
model_data$AlignedTrial = model_data$WithinGameTrial - model_data$PoL
model_data$LearnedYet = model_data$AlignedTrial > 0
## Basic Mixed Model ##
## just Age as fixed effect and Subj as random effect. ##
m1 <- lmer(data = model_data, formula = Entropy ~ scaled_age*LearnedYet + (1|subject_id))
summary(m1)
## Omnibus test.
car::Anova(m1, type = '3')
m1 <- lmer(data = model_data, formula = Entropy ~ Age*LearnedYet + (1|subject_id))
summary(m1)
## Omnibus test.
car::Anova(m1, type = '3')
m1 <- lmer(data = model_data, formula = Entropy ~ scaled_age*LearnedYet + (1|subject_id))
summary(m1)
## Omnibus test.
car::Anova(m1, type = '3')
## Linear Regression Model ##
# Load needed libraries
library(tidyverse)
library(glue)
library(magrittr)
library(afex)
library(knitr)
library(kableExtra)
library(broom)
data <- read.csv('https://raw.githubusercontent.com/angelaradulescu/ldm-analysis/main/ProcessedData/Feedback_Processed_CombinedBehavioralEyetrackingData.csv')
model_data <- data %>%
select(Subj, Entropy, Age, Adult, WithinGameTrial, Game, LearnedGame, Learned, IQ, PoL) %>%
mutate(scaled_age = scale_this(Age),
scaled_iq = scale_this(IQ),
subject_id = as.factor(Subj))
model_data$AlignedTrial <- model_data$WithinGameTrial - model_data$PoL
model_data$LearnedYet <- model_data$AlignedTrial > 0
adult_data <- model_data[model_data$Adult == 'True',]
adole_data <- model_data[model_data$Adult == 'False',]
# scale function (z-score)
scale_this <- function(x){
(x - mean(x, na.rm=TRUE)) / sd(x, na.rm=TRUE)
}
model_data <- data %>%
select(Subj, Entropy, Age, Adult, WithinGameTrial, Game, LearnedGame, Learned, IQ, PoL) %>%
mutate(scaled_age = scale_this(Age),
scaled_iq = scale_this(IQ),
subject_id = as.factor(Subj))
model_data$AlignedTrial <- model_data$WithinGameTrial - model_data$PoL
model_data$LearnedYet <- model_data$AlignedTrial > 0
adult_data <- model_data[model_data$Adult == 'True',]
adole_data <- model_data[model_data$Adult == 'False',]
data <- read.csv('https://raw.githubusercontent.com/angelaradulescu/ldm-analysis/main/ProcessedData/Feedback_Processed_CombinedBehavioralEyetrackingData.csv')
model_data <- data %>%
select(Subj, Entropy, Age, Adult, AgeGroup, WithinGameTrial, Game, LearnedGame, Learned, IQ, PoL) %>%
mutate(scaled_age = scale_this(Age),
scaled_iq = scale_this(IQ),
subject_id = as.factor(Subj))
model_data$AlignedTrial <- model_data$WithinGameTrial - model_data$PoL
model_data$LearnedYet <- model_data$AlignedTrial > 0
adult_data <- model_data[model_data$Adult == 'True',]
adole_data <- model_data[model_data$Adult == 'False',]
fit = lm(Entropy~WithinGameTrial+AgeGroup,data=model_data)
summary(fit)
equation1=function(x){coef(fit)[2]*x+coef(fit)[1]}
equation2=function(x){coef(fit)[2]*x+coef(fit)[1]+coef(fit)[3]}
ggplot(model_data,aes(y=Entropy,x=WithinGameTrial,color=AgeGroup))+geom_point()+
stat_function(fun=equation1,geom="line",color=scales::hue_pal()(2)[1])+
stat_function(fun=equation2,geom="line",color=scales::hue_pal()(2)[2])
fit1 = lm(Entropy~WithinGameTrial+LearnedGame,data=model_data)
summary(fit1)
equation1_1=function(x){coef(fit1)[2]*x+coef(fit1)[1]}
equation2_1=function(x){coef(fit1)[2]*x+coef(fit1)[1]+coef(fit1)[3]}
ggplot(model_data,aes(y=Entropy,x=WithinGameTrial,color=LearnedGame))+geom_point()+
stat_function(fun=equation1_1,geom="line",color=scales::hue_pal()(2)[1])+
stat_function(fun=equation2_1,geom="line",color=scales::hue_pal()(2)[2])
fit = lm(Entropy~WithinGameTrial+AgeGroup,data=model_data)
summary(fit)
equation1=function(x){coef(fit)[2]*x+coef(fit)[1]}
equation2=function(x){coef(fit)[2]*x+coef(fit)[1]+coef(fit)[3]}
ggplot(model_data,aes(y=Entropy,x=WithinGameTrial,color=AgeGroup))+geom_point()+
stat_function(fun=equation1,geom="line",color=scales::hue_pal()(2)[1])+
stat_function(fun=equation2,geom="line",color=scales::hue_pal()(2)[2])
fit1 = lm(Entropy~WithinGameTrial+LearnedGame,data=model_data)
summary(fit1)
equation1_1=function(x){coef(fit1)[2]*x+coef(fit1)[1]}
equation2_1=function(x){coef(fit1)[2]*x+coef(fit1)[1]+coef(fit1)[3]}
ggplot(model_data,aes(y=Entropy,x=WithinGameTrial,color=LearnedGame))+geom_point()+
stat_function(fun=equation1_1,geom="line",color=scales::hue_pal()(2)[1])+
stat_function(fun=equation2_1,geom="line",color=scales::hue_pal()(2)[2])
fit = lm(Entropy~WithinGameTrial+AgeGroup,data=model_data)
summary(fit)
equation1=function(x){coef(fit)[2]*x+coef(fit)[1]}
equation2=function(x){coef(fit)[2]*x+coef(fit)[1]+coef(fit)[3]}
ggplot(model_data,aes(y=Entropy,x=WithinGameTrial,color=AgeGroup))+geom_point()+
stat_function(fun=equation1,geom="line",color=scales::hue_pal()(2)[1])+
stat_function(fun=equation2,geom="line",color=scales::hue_pal()(2)[2])
ggPredict(fit1,se=TRUE,interactive=TRUE)
require(ggiraph)
require(ggiraphExtra)
require(plyr)
ggPredict(fit1,se=TRUE,interactive=TRUE)
require(ggiraph)
require(ggiraphExtra)
require(plyr)
ggPredict(fit1,se=TRUE,interactive=TRUE)
fit2 = lm(Entropy~WithinGameTrial+AgeGroup+LearnedGame,data=model_data)
summary(fit2)
ggPredict(fit2,se=TRUE,interactive=TRUE)
ggPredict(fit1,se=TRUE,interactive=TRUE)
ggPredict(fit2,se=TRUE,interactive=TRUE)
library(lattice)
library(lme4)
library(lmerTest)
library(psycho)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
##################### Import Data #####################
data <- read.csv('https://raw.githubusercontent.com/angelaradulescu/ldm-analysis/main/ProcessedData/Feedback_Processed_CombinedBehavioralEyetrackingData.csv')
# Clean data if needed
# clean_feedback_data <- feedback_data %>%
#   clean_names() %>%
#   select('subj', 'iq', 'within_game_trial', 'trial', 'game', 'entropy', 'age_group', 'po_l', 'rt', 'learned_feat', 'correct') %>%
#   rename('pol' = 'po_l')
#
# clean_feedback_data$age_group <- as.factor(clean_feedback_data$age_group)
##################### Helper function for rescaling data #####################
scale_this <- function(x){
(x - mean(x, na.rm=TRUE)) / sd(x, na.rm=TRUE)
}
##################### Select relevant data and rescale #####################
model_data <- data %>%
select(Subj, Entropy, Age, AgeGroup, WithinGameTrial, Game, LearnedGame, Learned, IQ, PoL) %>%
mutate(scaled_age = scale_this(Age),
scaled_iq = scale_this(IQ),
subject_id = as.factor(Subj))
model_data$AlignedTrial = model_data$WithinGameTrial - model_data$PoL
model_data$LearnedYet = model_data$AlignedTrial > 0
m1 <- lmer(data = model_data, formula = Entropy ~ AgeGroup*LearnedGame + (1|subject_id))
summary(m1)
## Omnibus test.
car::Anova(m1, type = '3')
m1 <- lmer(data = model_data, formula = Entropy ~ AgeGroup + LearnedGame + (1|subject_id))
summary(m1)
## Omnibus test.
car::Anova(m1, type = '3')
m1 <- lmer(data = model_data, formula = Entropy ~ AgeGroup*LearnedGame + (1|subject_id))
summary(m1)
## Omnibus test.
car::Anova(m1, type = '3')
model_data <- data %>%
select(Subj, Entropy, Age, AgeGroup, WithinGameTrial, Game, LearnedGame, Learned, IQ, PoL) %>%
mutate(scaled_age = scale_this(Age),
scaled_iq = scale_this(IQ),
subject_id = as.factor(Subj),
age_group = as.factor(AgeGroup))
model_data$AlignedTrial = model_data$WithinGameTrial - model_data$PoL
model_data$LearnedYet = model_data$AlignedTrial > 0
m1 <- lmer(data = model_data, formula = Entropy ~ age_group*LearnedGame + (1|subject_id))
summary(m1)
## Omnibus test.
car::Anova(m1, type = '3')
m2 <- lmer(data = model_data, formula = Entropy ~ age_group*WithinGameTrial*Game*LearnedGame + (1|subject_id))
summary(m2)
## Omnibus test.
car::Anova(m2, type = '3')
fit1 = lm(Entropy~WithinGameTrial*LearnedGame,data=model_data)
summary(fit1)
equation1_1=function(x){coef(fit1)[2]*x+coef(fit1)[1]}
equation2_1=function(x){coef(fit1)[2]*x+coef(fit1)[1]+coef(fit1)[3]}
ggplot(model_data,aes(y=Entropy,x=WithinGameTrial,color=LearnedGame))+geom_point()+
stat_function(fun=equation1_1,geom="line",color=scales::hue_pal()(2)[1])+
stat_function(fun=equation2_1,geom="line",color=scales::hue_pal()(2)[2])
ggPredict(fit1,se=TRUE,interactive=TRUE)
fit = lm(Entropy~WithinGameTrial*AgeGroup,data=model_data)
summary(fit)
equation1=function(x){coef(fit)[2]*x+coef(fit)[1]}
equation2=function(x){coef(fit)[2]*x+coef(fit)[1]+coef(fit)[3]}
ggplot(model_data,aes(y=Entropy,x=WithinGameTrial,color=AgeGroup))+geom_point()+
stat_function(fun=equation1,geom="line",color=scales::hue_pal()(2)[1])+
stat_function(fun=equation2,geom="line",color=scales::hue_pal()(2)[2])
ggPredict(fit,se=TRUE,interactive=TRUE)
fit = lm(Entropy~WithinGameTrial+AgeGroup,data=model_data)
summary(fit)
equation1=function(x){coef(fit)[2]*x+coef(fit)[1]}
equation2=function(x){coef(fit)[2]*x+coef(fit)[1]+coef(fit)[3]}
ggplot(model_data,aes(y=Entropy,x=WithinGameTrial,color=AgeGroup))+geom_point()+
stat_function(fun=equation1,geom="line",color=scales::hue_pal()(2)[1])+
stat_function(fun=equation2,geom="line",color=scales::hue_pal()(2)[2])
ggPredict(fit,se=TRUE,interactive=TRUE)
fit1 = lm(Entropy~WithinGameTrial*LearnedGame,data=model_data)
summary(fit1)
equation1_1=function(x){coef(fit1)[2]*x+coef(fit1)[1]}
equation2_1=function(x){coef(fit1)[2]*x+coef(fit1)[1]+coef(fit1)[3]}
ggplot(model_data,aes(y=Entropy,x=WithinGameTrial,color=LearnedGame))+geom_point()+
stat_function(fun=equation1_1,geom="line",color=scales::hue_pal()(2)[1])+
stat_function(fun=equation2_1,geom="line",color=scales::hue_pal()(2)[2])
ggPredict(fit1,se=TRUE,interactive=TRUE)
fit2 = lm(Entropy~WithinGameTrial*LearnedGame+AgeGroup,data=model_data)
summary(fit2)
equation1_2=function(x){coef(fit2)[2]*x+coef(fit2)[1]}
equation2_2=function(x){coef(fit2)[2]*x+coef(fit2)[1]+coef(fit2)[3]}
ggplot(model_data,aes(y=Entropy,x=WithinGameTrial,color=AgeGroup,color=LearnedGame))+geom_point()+
stat_function(fun=equation1_2,geom="line",color=scales::hue_pal()(2)[1])+
stat_function(fun=equation2_2,geom="line",color=scales::hue_pal()(2)[2])
ggPredict(fit2,se=TRUE,interactive=TRUE)
ggplot(model_data,aes(y=Entropy,x=WithinGameTrial,color=AgeGroup,linetype=LearnedGame))+geom_point()+
stat_function(fun=equation1_2,geom="line",color=scales::hue_pal()(2)[1])+
stat_function(fun=equation2_2,geom="line",color=scales::hue_pal()(2)[2])
ggPredict(fit2,se=TRUE,interactive=TRUE)
fit2 = lm(Entropy~WithinGameTrial*LearnedGame+AgeGroup,data=model_data)
summary(fit2)
equation1_2=function(x){coef(fit2)[2]*x+coef(fit2)[1]}
equation2_2=function(x){coef(fit2)[2]*x+coef(fit2)[1]+coef(fit2)[3]}
ggplot(model_data,aes(y=Entropy,x=WithinGameTrial,color=AgeGroup,linetype=LearnedGame))+geom_point()+
stat_function(fun=equation1_2,geom="line",color=scales::hue_pal()(2)[1])+
stat_function(fun=equation2_2,geom="line",color=scales::hue_pal()(2)[2])
ggPredict(fit2,se=TRUE,interactive=TRUE)
library(tidyverse)
library(glue)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(afex)
library(knitr)
library(kableExtra)
library(broom)
library(lattice)
library(lme4)
library(lmerTest)
library(psycho)
library(dplyr)    # alternatively, this also loads %>%
require(ggiraph)
require(ggiraphExtra)
require(plyr)
scale_this <- function(x){
(x - mean(x, na.rm=TRUE)) / sd(x, na.rm=TRUE)
}
# run wasi iq analysis
age_iq_data <- read.csv('https://raw.githubusercontent.com/angelaradulescu/ldm-analysis/main/ProcessedData/ageIQMap.csv')
age_iq_data %<>%
mutate(age_scaled = scale_this(Age),
iq_scaled = scale_this(IQ))
lm(IQ ~ Age, age_iq_data) %>%
tidy() %>%
kable()%>%
kable_classic(full_width = F, html_font = "Arial") %>%
kable_styling("striped", position = "float_left")
####################### AgexNumberOfGamesLearned ###############################
behav_data <- read.csv('https://raw.githubusercontent.com/angelaradulescu/ldm-analysis/main/ProcessedData/CleanedProcessedBehavioralData.csv')
sub_summary <- behav_data %>%
select(Subj, Age, LearnedGame, PoL) %>%
unique() %>%
group_by(Subj,Age) %>%
mutate(LearnedGame = as.logical(LearnedGame)) %>%
summarize(GamesLearned = sum(LearnedGame))
sub_summary$age_scaled <- scale_this(sub_summary$Age)
lm(GamesLearned ~ age_scaled, sub_summary) %>%
tidy() %>%
kable()%>%
kable_classic(full_width = F, html_font = "Arial") %>%
kable_styling("striped", position = "float_left")
sub_summary <- behav_data %>%
select(Subj, Age, LearnedGame, PoL) %>%
unique() %>%
group_by(Subj,Age) %>%
mutate(LearnedGame = as.logical(LearnedGame)) %>%
summarize(GamesLearned = sum(LearnedGame))
sub_summary$age_scaled <- scale_this(sub_summary$Age)
scale_this <- function(x){
(x - mean(x, na.rm=TRUE)) / sd(x, na.rm=TRUE)
}
# run wasi iq analysis
age_iq_data <- read.csv('https://raw.githubusercontent.com/angelaradulescu/ldm-analysis/main/ProcessedData/ageIQMap.csv')
age_iq_data %<>%
mutate(age_scaled = scale_this(Age),
iq_scaled = scale_this(IQ))
lm(IQ ~ Age, age_iq_data) %>%
tidy() %>%
kable()%>%
kable_classic(full_width = F, html_font = "Arial") %>%
kable_styling("striped", position = "float_left")
####################### AgexNumberOfGamesLearned ###############################
behav_data <- read.csv('https://raw.githubusercontent.com/angelaradulescu/ldm-analysis/main/ProcessedData/CleanedProcessedBehavioralData.csv')
sub_summary <- behav_data %>%
select(Subj, Age, LearnedGame, PoL) %>%
unique() %>%
group_by(Subj,Age) %>%
mutate(LearnedGame = as.logical(LearnedGame)) %>%
summarize(GamesLearned = sum(LearnedGame))
sub_summary$age_scaled <- scale_this(sub_summary$Age)
lm(GamesLearned ~ age_scaled, sub_summary) %>%
tidy() %>%
kable()%>%
kable_classic(full_width = F, html_font = "Arial") %>%
kable_styling("striped", position = "float_left")
sub_summary$age_scaled <- scale_this(sub_summary$Age)
sub_summary <- behav_data %>%
select(Subj, Age, LearnedGame, PoL) %>%
unique() %>%
group_by(Subj,Age) %>%
mutate(LearnedGame = as.logical(LearnedGame))
sub_summary$age_scaled <- scale_this(sub_summary$Age)
lm(GamesLearned ~ age_scaled, sub_summary) %>%
tidy() %>%
kable()%>%
kable_classic(full_width = F, html_font = "Arial") %>%
kable_styling("striped", position = "float_left")
## Fit Trial and Age Group without interaction ##
fit = lm(Entropy~WithinGameTrial*AgeGroup,data=model_data)
###################### Visualize Feedback Trial Entropy ########################
data <- read.csv('https://raw.githubusercontent.com/angelaradulescu/ldm-analysis/main/ProcessedData/Feedback_Processed_CombinedBehavioralEyetrackingData.csv')
model_data <- data %>%
select(Subj, Entropy, Age, Adult, AgeGroup, WithinGameTrial, Game, LearnedGame, Learned, IQ, PoL) %>%
mutate(scaled_age = scale_this(Age),
scaled_iq = scale_this(IQ),
subject_id = as.factor(Subj))
model_data$AlignedTrial <- model_data$WithinGameTrial - model_data$PoL
model_data$LearnedYet <- model_data$AlignedTrial > 0
adult_data <- model_data[model_data$Adult == 'True',]
adole_data <- model_data[model_data$Adult == 'False',]
## Fit Trial and Age Group without interaction ##
fit = lm(Entropy~WithinGameTrial*AgeGroup,data=model_data)
summary(fit)
##################### Import Data #####################
data <- read.csv('/Users/angelaradulescu/Dropbox/NYU/Research/LDM/ldm-analysis/ProcessedData/Feedback_Processed_CombinedBehavioralEyetrackingData.csv')
head(data, 10)
scale_this <- function(x){
(x - mean(x, na.rm=TRUE)) / sd(x, na.rm=TRUE)
}
scale_this <- function(x){
(x - mean(x, na.rm=TRUE)) / sd(x, na.rm=TRUE)
}
model_data <- data %>%
select(Subj, Entropy, Age, AgeGroup, WithinGameTrial, Game, LearnedGame, Learned, IQ, PoL) %>%
mutate(scaled_age = scale_this(Age),
scaled_iq = scale_this(IQ),
subject_id = as.factor(Subj),
age_group = as.factor(AgeGroup))
### Fit 3 predictor variables, with and without interaction ##
fit2 = lm(Entropy~WithinGameTrial*LearnedGame*AgeGroup,data=model_data)
summary(fit2)
model_data <- data %>%
select(Subj, Entropy, Age, AgeGroup, WithinGameTrial, Game, LearnedGame, Learned, IQ, PoL) %>%
mutate(scaled_age = scale_this(Age),
scaled_iq = scale_this(IQ),
subject_id = as.factor(Subj),
age_group = as.factor(AgeGroup))
## Basic Mixed Model ##
## just Age*LearnedGame as fixed effects Subj as random effect. ##
m1 <- lmer(data = model_data, formula = Entropy ~ scaled_age*LearnedGame + (1|subject_id))
summary(m1)
## Basic Mixed Model ##
## just Age*LearnedGame as fixed effects Subj as random effect. ##
m1 <- lmer(data = model_data, formula = Entropy ~ scaled_age*LearnedGame + (1|subject_id/LearnedGame))
summary(m1)
## Basic Mixed Model ##
## just Age*LearnedGame as fixed effects Subj as random effect. ##
m1 <- lmer(data = model_data, formula = Entropy ~ scaled_age*LearnedGame + (1|subject_id/LearnedGame))
summary(m1)
## Basic Mixed Model ##
## just Age*LearnedGame as fixed effects Subj as random effect. ##
m1a <- lmer(data = model_data, formula = Entropy ~ AgeGroup*LearnedGame + (1|subject_id/LearnedGame))
summary(m1a)
m1b <- lmer(data = model_data, formula = Entropy ~ AgeGroup*WithinGameTrial + (1|subject_id/WithinGameTrial))
summary(m1b)
m1b <- lmer(data = model_data, formula = Entropy ~ AgeGroup + WithinGameTrial + (1|subject_id/WithinGameTrial))
summary(m1b)
m1b <- lmer(data = model_data, formula = Entropy ~ AgeGroup*WithinGameTrial + (1|subject_id))
summary(m1b)
m1b <- lmer(data = model_data, formula = Entropy ~ AgeGroup + WithinGameTrial + (1|subject_id))
summary(m1b)
m1b <- lmer(data = model_data, formula = Entropy ~ AgeGroup*WithinGameTrial + (1|subject_id))
summary(m1b)
## Fit Trial and Age Group without interaction ##
fit = lm(Entropy~WithinGameTrial*AgeGroup,data=model_data)
summary(fit)
m1b <- lmer(data = model_data, formula = Entropy ~ AgeGroup*WithinGameTrial + (1|subject_id))
summary(m1b)
## Fit Trial and Age Group without interaction ##
fit = lm(Entropy~WithinGameTrial*AgeGroup,data=model_data)
summary(fit)
m1b <- lmer(data = model_data, formula = Entropy ~ AgeGroup*WithinGameTrial + (1|subject_id/WithinGameTrial))
summary(m1b)
m1b <- lmer(data = model_data, formula = Entropy ~ AgeGroup*WithinGameTrial + (1|subject_id))
summary(m1b)
m1b <- lmer(data = model_data, formula = Entropy ~ AgeGroup*WithinGameTrial*LearnedGame + (1|subject_id))
summary(m1b)
m1b <- lmer(data = model_data, formula = Entropy ~ AgeGroup*WithinGameTrial + (1|subject_id))
summary(m1b)
